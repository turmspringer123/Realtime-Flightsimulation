export declare const SimConnectConstants: {
    /** Specify the user aircraft in {@link SimConnectRecvEvents#simObjectDataByType} and {@link SimConnectConnection.requestDataOnSimObject} */
    OBJECT_ID_USER: number;
    UNUSED: number;
    /** current (and max) protocol version supported by this implementation of jsimconnect */
    PROTO_VERSION: number;
    RECEIVE_SIZE: number;
    /** indicates that the value for the camera should be taken unmodified from the reference point. */
    MAX_METAR_LENGTH: number;
    MAX_THERMAL_SIZE: number;
    MAX_THERMAL_RATE: number;
    /** The aircraft's design cruising speed. */
    INITPOSITION_AIRSPEED_CRUISE: number;
    /** Maintain the current airspeed.  */
    INITPOSITION_AIRSPEED_KEEP: number;
    /** a MS Windows constant */
    MAX_PATH: number;
    /** Specifies requested speed is valid. */
    WAYPOINT_SPEED_REQUESTED: number;
    /** Specifies requested throttle percentage is valid. */
    WAYPOINT_THROTTLE_REQUESTED: number;
    /** Specifies that the vertical should be calculated to reach the required speed when crossing the waypoint. */
    WAYPOINT_COMPUTE_VERTICAL_SPEED: number;
    /** Specifies the altitude specified is AGL (above ground level). */
    WAYPOINT_ALTITUDE_IS_AGL: number;
    /** Specifies the waypoint should be on the ground. Make sure this flag is set if the aircraft is to taxi to this point. */
    WAYPOINT_ON_GROUND: number;
    /** Specifies that the aircraft should back up to this waypoint. This is only valid on the first waypoint. */
    WAYPOINT_REVERSE: number;
    /** Specifies that the next waypoint is the first waypoint. This is only valid on the last waypoint. */
    WAYPOINT_WRAP_TO_FIRST: number;
    /** When subscribed to event <code>MissionCompleted</code> */
    MISSION_FAILED: number;
    /** When subscribed to event <code>MissionCompleted</code> */
    MISSION_CRASHED: number;
    /** When subscribed to event <code>MissionCompleted</code> */
    MISSION_SUCCEEDED: number;
    /** When subscribed to event <code>View</code>, 2D Panels in cockpit view */
    VIEW_SYSTEM_EVENT_DATA_COCKPIT_2D: number;
    /** When subscribed to event <code>View</code>, Virtual (3D) panels in cockpit view */
    VIEW_SYSTEM_EVENT_DATA_COCKPIT_VIRTUAL: number;
    /** When subscribed to event <code>View</code>, Orthogonal (Map) view */
    VIEW_SYSTEM_EVENT_DATA_ORTHOGONAL: number;
    /** When subsribed to event <code>Sound</event> */
    SOUND_SYSTEM_EVENT_DATA_MASTER: number;
    /** unknow group received */
    UNKNOWN_GROUP: number;
    /** automatically compute offset of the ClientData variable */
    CLIENTDATAOFFSET_AUTO: number;
    /**   Specifies that the user has selected the menu item. */
    TEXT_RESULT_MENU_SELECT_1: number;
    /**   Specifies that the user has selected the menu item. */
    TEXT_RESULT_MENU_SELECT_2: number;
    /**   Specifies that the user has selected the menu item. */
    TEXT_RESULT_MENU_SELECT_3: number;
    /**   Specifies that the user has selected the menu item. */
    TEXT_RESULT_MENU_SELECT_4: number;
    /**   Specifies that the user has selected the menu item. */
    TEXT_RESULT_MENU_SELECT_5: number;
    /**   Specifies that the user has selected the menu item. */
    TEXT_RESULT_MENU_SELECT_6: number;
    /**   Specifies that the user has selected the menu item. */
    TEXT_RESULT_MENU_SELECT_7: number;
    /**   Specifies that the user has selected the menu item. */
    TEXT_RESULT_MENU_SELECT_8: number;
    /**   Specifies that the user has selected the menu item. */
    TEXT_RESULT_MENU_SELECT_9: number;
    /**   Specifies that the user has selected the menu item. */
    TEXT_RESULT_MENU_SELECT_10: number;
    /**   Specifies that the menu or text identified by the EventID is now on display. */
    TEXT_RESULT_DISPLAYED: number;
    /**   Specifies that the menu or text identified by the EventID is waiting in a queue. */
    TEXT_RESULT_QUEUED: number;
    /**   Specifies that the menu or text identified by the EventID has been removed from the queue. */
    TEXT_RESULT_REMOVED: number;
    /**    Specifies that the menu or text identified by the EventID has been replaced in the queue. */
    TEXT_RESULT_REPLACED: number;
    /**   Specifies that the menu or text identified by the EventID has timed-out and is no longer on display. */
    TEXT_RESULT_TIMEOUT: number;
    /** @see SimConnect#addToClientDataDefinition(int, int, int, float, int) */
    CLIENT_DATA_TYPE_INT8: number;
    /** @see SimConnect#addToClientDataDefinition(int, int, int, float, int) */
    CLIENT_DATA_TYPE_INT16: number;
    /** @see SimConnect#addToClientDataDefinition(int, int, int, float, int) */
    CLIENT_DATA_TYPE_INT32: number;
    /** @see SimConnect#addToClientDataDefinition(int, int, int, float, int) */
    CLIENT_DATA_TYPE_INT64: number;
    /** @see SimConnect#addToClientDataDefinition(int, int, int, float, int) */
    CLIENT_DATA_TYPE_FLOAT32: number;
    /** @see SimConnect#addToClientDataDefinition(int, int, int, float, int) */
    CLIENT_DATA_TYPE_FLOAT64: number;
};
//# sourceMappingURL=SimConnectConstants.d.ts.map