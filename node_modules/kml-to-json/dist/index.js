"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearJsonTexts = exports.jsonToKmlString = exports.jsonToKml = exports.kmlToJsonString = exports.kmlToJson = void 0;
const jsonConverter_1 = require("./utils/jsonConverter");
const kmlConverter_1 = require("./utils/kmlConverter");
const reader_1 = require("./utils/reader");
/**
 * Converts a KML file to a JSON object.
 *
 * @param file The KML file to be uploaded.
 * @returns An object containing all KML information.
 */
function kmlToJson(file) {
    return __awaiter(this, void 0, void 0, function* () {
        const kmlText = yield (0, reader_1.readKML)(file);
        return (0, jsonConverter_1.convertToJson)(kmlText);
    });
}
exports.kmlToJson = kmlToJson;
/**
 * Converts a KML file to a stringified JSON object.
 *
 * @param file The KML file to be uploaded.
 * @returns A stringified object containing all KML information.
 */
function kmlToJsonString(file) {
    return __awaiter(this, void 0, void 0, function* () {
        const json = yield kmlToJson(file);
        return JSON.stringify(json);
    });
}
exports.kmlToJsonString = kmlToJsonString;
/**
 * Converts a JSON object or string to a KML file.
 *
 * @param json The JSON object or string to be converted.
 * @returns A blob that represents the KML file.
 */
function jsonToKml(json) {
    const kml = (0, kmlConverter_1.convertToKML)(json);
    return new Blob([kml], { type: 'application/vnd.google-earth.kml+xml' });
}
exports.jsonToKml = jsonToKml;
/**
 * Converts a JSON object or string to a KML text.
 *
 * @param json The JSON object or string to be converted.
 * @returns A string that represents the KML structure.
 */
function jsonToKmlString(json) {
    return (0, kmlConverter_1.convertToKML)(json);
}
exports.jsonToKmlString = jsonToKmlString;
/**
 * Filters all tags and their children to remove texts that only
 * contains '\n' and spaces.
 *
 * @param json The JSON object or string to be cleaned.
 * @returns An object containing only the filtered properties.
 */
function clearJsonTexts(json) {
    const clearChildren = (kml) => {
        const textRegex = /text([0-9]+)/g;
        const cleanRegex = /\s*\n\s*/gi;
        if (!kml.children) {
            return;
        }
        Object.entries(kml.children).forEach(([key, value]) => {
            if (textRegex.test(key) &&
                value.data.replace(cleanRegex, '').length === 0) {
                delete kml.children[key];
                return;
            }
            clearChildren(value);
        });
    };
    const kmlObject = typeof json === 'string' ? JSON.parse(json) : json;
    clearChildren(Object.values(kmlObject)[0]);
    return kmlObject;
}
exports.clearJsonTexts = clearJsonTexts;
//# sourceMappingURL=index.js.map