"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readKML = void 0;
/**
 * Reads a KML file and returns its content.
 *
 * @param file The file that will be read.
 * @returns The file text content.
 * @throws Whether no file is uploaded or the file is not a KML.
 */
function readKML(file) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!file) {
            throw new Error('No file uploaded!');
        }
        if (!file.type.includes('vnd.google-earth.kml') &&
            !file.name.match(/\.kml$/)) {
            throw new Error('Invalid file type! The file must be a KML.');
        }
        return yield file.text();
    });
}
exports.readKML = readKML;
//# sourceMappingURL=reader.js.map