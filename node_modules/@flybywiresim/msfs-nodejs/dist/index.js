'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var simconnect$3 = require('./libs/simconnect');
var Connection = simconnect$3.ConnectionBindings;

var ClientDataOffsetAuto = -1;
var ClientDataMaxSize = 8192;
exports.ClientDataType = void 0;
(function (ClientDataType) {
    ClientDataType[ClientDataType["Int8"] = -1] = "Int8";
    ClientDataType[ClientDataType["Int16"] = -2] = "Int16";
    ClientDataType[ClientDataType["Int32"] = -3] = "Int32";
    ClientDataType[ClientDataType["Int64"] = -4] = "Int64";
    ClientDataType[ClientDataType["Float32"] = -5] = "Float32";
    ClientDataType[ClientDataType["Float64"] = -6] = "Float64";
})(exports.ClientDataType || (exports.ClientDataType = {}));
exports.ClientDataPeriod = void 0;
(function (ClientDataPeriod) {
    ClientDataPeriod[ClientDataPeriod["Never"] = 0] = "Never";
    ClientDataPeriod[ClientDataPeriod["Once"] = 1] = "Once";
    ClientDataPeriod[ClientDataPeriod["VisualFrame"] = 2] = "VisualFrame";
    ClientDataPeriod[ClientDataPeriod["OnSet"] = 3] = "OnSet";
    ClientDataPeriod[ClientDataPeriod["Second"] = 4] = "Second";
})(exports.ClientDataPeriod || (exports.ClientDataPeriod = {}));
exports.ClientDataRequest = void 0;
(function (ClientDataRequest) {
    ClientDataRequest[ClientDataRequest["Default"] = 0] = "Default";
    ClientDataRequest[ClientDataRequest["Changed"] = 1] = "Changed";
    ClientDataRequest[ClientDataRequest["Tagged"] = 2] = "Tagged";
})(exports.ClientDataRequest || (exports.ClientDataRequest = {}));

exports.SimulatorDataType = void 0;
(function (SimulatorDataType) {
    SimulatorDataType[SimulatorDataType["Invalid"] = 0] = "Invalid";
    SimulatorDataType[SimulatorDataType["Int32"] = 1] = "Int32";
    SimulatorDataType[SimulatorDataType["Int64"] = 2] = "Int64";
    SimulatorDataType[SimulatorDataType["Float32"] = 3] = "Float32";
    SimulatorDataType[SimulatorDataType["Float64"] = 4] = "Float64";
    SimulatorDataType[SimulatorDataType["String8"] = 5] = "String8";
    SimulatorDataType[SimulatorDataType["String32"] = 6] = "String32";
    SimulatorDataType[SimulatorDataType["String64"] = 7] = "String64";
    SimulatorDataType[SimulatorDataType["String128"] = 8] = "String128";
    SimulatorDataType[SimulatorDataType["String256"] = 9] = "String256";
    SimulatorDataType[SimulatorDataType["String260"] = 10] = "String260";
    SimulatorDataType[SimulatorDataType["StringVariable"] = 11] = "StringVariable";
    SimulatorDataType[SimulatorDataType["InitPosition"] = 12] = "InitPosition";
    SimulatorDataType[SimulatorDataType["MarkerState"] = 13] = "MarkerState";
    SimulatorDataType[SimulatorDataType["Waypoint"] = 14] = "Waypoint";
    SimulatorDataType[SimulatorDataType["LatLongAlt"] = 15] = "LatLongAlt";
    SimulatorDataType[SimulatorDataType["XYZ"] = 16] = "XYZ";
})(exports.SimulatorDataType || (exports.SimulatorDataType = {}));
exports.SimulatorDataPeriod = void 0;
(function (SimulatorDataPeriod) {
    SimulatorDataPeriod[SimulatorDataPeriod["Never"] = 0] = "Never";
    SimulatorDataPeriod[SimulatorDataPeriod["Once"] = 1] = "Once";
    SimulatorDataPeriod[SimulatorDataPeriod["VisualFrame"] = 2] = "VisualFrame";
    SimulatorDataPeriod[SimulatorDataPeriod["SimFrame"] = 3] = "SimFrame";
    SimulatorDataPeriod[SimulatorDataPeriod["Second"] = 4] = "Second";
})(exports.SimulatorDataPeriod || (exports.SimulatorDataPeriod = {}));
exports.SimulatorDataWaypointFlags = void 0;
(function (SimulatorDataWaypointFlags) {
    SimulatorDataWaypointFlags[SimulatorDataWaypointFlags["SpeedRequested"] = 4] = "SpeedRequested";
    SimulatorDataWaypointFlags[SimulatorDataWaypointFlags["ThrottleRequested"] = 8] = "ThrottleRequested";
    SimulatorDataWaypointFlags[SimulatorDataWaypointFlags["ComputeVerticalSpeed"] = 16] = "ComputeVerticalSpeed";
    SimulatorDataWaypointFlags[SimulatorDataWaypointFlags["AltitudeIsAGL"] = 32] = "AltitudeIsAGL";
    SimulatorDataWaypointFlags[SimulatorDataWaypointFlags["OnGround"] = 1048576] = "OnGround";
    SimulatorDataWaypointFlags[SimulatorDataWaypointFlags["Reverse"] = 2097152] = "Reverse";
    SimulatorDataWaypointFlags[SimulatorDataWaypointFlags["WrapToFirst"] = 4194304] = "WrapToFirst";
})(exports.SimulatorDataWaypointFlags || (exports.SimulatorDataWaypointFlags = {}));

var simconnect$2 = require('./libs/simconnect');
var ClientDataArea = simconnect$2.ClientDataAreaBindings;

var simconnect$1 = require('./libs/simconnect');
var SimulatorDataArea = simconnect$1.SimulatorDataAreaBindings;

var simconnect = require('./libs/simconnect');
var Dispatcher = simconnect.DispatcherBindings;

var Receiver = /** @class */ (function () {
    function Receiver(connection) {
        this.dispatcher = null;
        this.interval = null;
        this.callbacks = {
            open: null,
            quit: null,
            clientData: null,
            simulatorData: null,
            exception: null,
            error: null
        };
        this.dispatcher = new Dispatcher(connection);
    }
    Receiver.prototype.processDispatch = function () {
        var response = this.dispatcher.nextDispatch();
        if (response === null)
            return;
        switch (response.type) {
            case 'open':
                if (this.callbacks.open !== null)
                    this.callbacks.open(response.data);
                break;
            case 'quit':
                if (this.callbacks.quit !== null)
                    this.callbacks.quit();
                break;
            case 'clientData':
                if (this.callbacks.clientData !== null)
                    this.callbacks.clientData(response.data);
                break;
            case 'simulatorData':
                if (this.callbacks.simulatorData !== null)
                    this.callbacks.simulatorData(response.data);
                break;
            case 'exception':
                if (this.callbacks.exception !== null)
                    this.callbacks.exception(response.data);
                break;
            case 'error':
                if (this.callbacks.error !== null)
                    this.callbacks.error(response.data);
                break;
            default:
                throw Error('Unknown message type in the dispatcher');
        }
    };
    Receiver.prototype.addCallback = function (event, callback) {
        this.callbacks[event] = callback;
    };
    Receiver.prototype.start = function () {
        var _this = this;
        if (this.interval === null) {
            this.interval = setInterval(function () { return _this.processDispatch(); }, 50);
        }
    };
    Receiver.prototype.stop = function () {
        if (this.interval !== null) {
            clearInterval(this.interval);
            this.interval = null;
        }
    };
    Receiver.prototype.requestClientData = function (clientData, period, request) {
        return this.dispatcher.requestClientData(clientData, period, request);
    };
    Receiver.prototype.requestSimulatorData = function (simulatorData, period) {
        return this.dispatcher.requestSimulatorData(simulatorData, period);
    };
    return Receiver;
}());

exports.ClientDataArea = ClientDataArea;
exports.ClientDataMaxSize = ClientDataMaxSize;
exports.ClientDataOffsetAuto = ClientDataOffsetAuto;
exports.Connection = Connection;
exports.Dispatcher = Dispatcher;
exports.Receiver = Receiver;
exports.SimulatorDataArea = SimulatorDataArea;
//# sourceMappingURL=index.js.map
