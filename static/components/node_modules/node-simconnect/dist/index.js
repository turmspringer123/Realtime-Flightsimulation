"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.open = exports.RawBuffer = void 0;
const SimConnectConnection_1 = require("./SimConnectConnection");
__exportStar(require("./SimConnectConstants"), exports);
__exportStar(require("./enums/ClientDataPeriod"), exports);
__exportStar(require("./enums/SimConnectDataType"), exports);
__exportStar(require("./enums/TextType"), exports);
__exportStar(require("./enums/TextResult"), exports);
__exportStar(require("./enums/SimConnectPeriod"), exports);
__exportStar(require("./enums/SimConnectException"), exports);
__exportStar(require("./enums/SimObjectType"), exports);
__exportStar(require("./enums/FacilityListType"), exports);
__exportStar(require("./enums/NotificationPriority"), exports);
__exportStar(require("./enums/Protocol"), exports);
__exportStar(require("./enums/WeatherMode"), exports);
__exportStar(require("./SimConnectConnection"), exports);
__exportStar(require("./SimConnectSocket"), exports);
__exportStar(require("./flags/EventFlag"), exports);
__exportStar(require("./flags/DataRequestFlag"), exports);
__exportStar(require("./flags/DataSetFlag"), exports);
__exportStar(require("./flags/ClientDataRequestFlag"), exports);
__exportStar(require("./facility/FacilityAirport"), exports);
__exportStar(require("./facility/FacilityNDB"), exports);
__exportStar(require("./facility/FacilityVOR"), exports);
__exportStar(require("./facility/FacilityWaypoint"), exports);
__exportStar(require("./Types"), exports);
__exportStar(require("./recv"), exports);
__exportStar(require("./dto"), exports);
var RawBuffer_1 = require("./RawBuffer");
Object.defineProperty(exports, "RawBuffer", { enumerable: true, get: function () { return RawBuffer_1.RawBuffer; } });
/**
 * Try opening a connection to SimConnect
 *
 * @param appName - An appropriate name for the client program
 * @param protocolVersion - Lowest protocol version
 * @param options - Used for connecting to a remote instance of SimConnect. If omitted it will attempt to read connection parameters from the following sources:
 *
 * - IP + port number from SimConnect.cfg in the node.js installation directory (or the installation directory of the Electron app)
 *
 * - IP + port number from SimConnect.cfg in the user's home directory
 *
 * - Named pipe found in the Windows registry (available when the sim has started)
 *
 * - Port number, for use with localhost, found in the Windows registry (available when the sim has started)
 *
 */
function open(appName, protocolVersion, options) {
    const simConnectConnection = new SimConnectConnection_1.SimConnectConnection(appName, protocolVersion);
    return new Promise((resolve, reject) => {
        simConnectConnection.on('open', data => {
            resolve({ recvOpen: data, handle: simConnectConnection });
        });
        simConnectConnection.on('error', error => {
            reject(error);
        });
        simConnectConnection.connect(options);
    });
}
exports.open = open;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxpRUFBaUY7QUFJakYsd0RBQXNDO0FBQ3RDLDJEQUF5QztBQUN6Qyw2REFBMkM7QUFDM0MsbURBQWlDO0FBQ2pDLHFEQUFtQztBQUNuQywyREFBeUM7QUFDekMsOERBQTRDO0FBQzVDLHdEQUFzQztBQUN0QywyREFBeUM7QUFDekMsK0RBQTZDO0FBQzdDLG1EQUFpQztBQUNqQyxzREFBb0M7QUFDcEMseURBQXVDO0FBQ3ZDLHFEQUFtQztBQUNuQyxvREFBa0M7QUFDbEMsMERBQXdDO0FBQ3hDLHNEQUFvQztBQUNwQyxnRUFBOEM7QUFDOUMsNkRBQTJDO0FBQzNDLHlEQUF1QztBQUN2Qyx5REFBdUM7QUFDdkMsOERBQTRDO0FBQzVDLDBDQUF3QjtBQUV4Qix5Q0FBdUI7QUFDdkIsd0NBQXNCO0FBQ3RCLHlDQUF3QztBQUEvQixzR0FBQSxTQUFTLE9BQUE7QUFPbEI7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBQ0gsU0FBZ0IsSUFBSSxDQUNoQixPQUFlLEVBQ2YsZUFBeUIsRUFDekIsT0FBMkI7SUFFM0IsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLDJDQUFvQixDQUFDLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztJQUNoRixPQUFPLElBQUksT0FBTyxDQUFZLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQzlDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUU7WUFDbkMsT0FBTyxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO1FBQzlELENBQUMsQ0FBQyxDQUFDO1FBQ0gsb0JBQW9CLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsRUFBRTtZQUNyQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBZkQsb0JBZUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaW1Db25uZWN0Q29ubmVjdGlvbiwgQ29ubmVjdGlvbk9wdGlvbnMgfSBmcm9tICcuL1NpbUNvbm5lY3RDb25uZWN0aW9uJztcbmltcG9ydCB7IFByb3RvY29sIH0gZnJvbSAnLi9lbnVtcy9Qcm90b2NvbCc7XG5pbXBvcnQgeyBSZWN2T3BlbiB9IGZyb20gJy4vcmVjdic7XG5cbmV4cG9ydCAqIGZyb20gJy4vU2ltQ29ubmVjdENvbnN0YW50cyc7XG5leHBvcnQgKiBmcm9tICcuL2VudW1zL0NsaWVudERhdGFQZXJpb2QnO1xuZXhwb3J0ICogZnJvbSAnLi9lbnVtcy9TaW1Db25uZWN0RGF0YVR5cGUnO1xuZXhwb3J0ICogZnJvbSAnLi9lbnVtcy9UZXh0VHlwZSc7XG5leHBvcnQgKiBmcm9tICcuL2VudW1zL1RleHRSZXN1bHQnO1xuZXhwb3J0ICogZnJvbSAnLi9lbnVtcy9TaW1Db25uZWN0UGVyaW9kJztcbmV4cG9ydCAqIGZyb20gJy4vZW51bXMvU2ltQ29ubmVjdEV4Y2VwdGlvbic7XG5leHBvcnQgKiBmcm9tICcuL2VudW1zL1NpbU9iamVjdFR5cGUnO1xuZXhwb3J0ICogZnJvbSAnLi9lbnVtcy9GYWNpbGl0eUxpc3RUeXBlJztcbmV4cG9ydCAqIGZyb20gJy4vZW51bXMvTm90aWZpY2F0aW9uUHJpb3JpdHknO1xuZXhwb3J0ICogZnJvbSAnLi9lbnVtcy9Qcm90b2NvbCc7XG5leHBvcnQgKiBmcm9tICcuL2VudW1zL1dlYXRoZXJNb2RlJztcbmV4cG9ydCAqIGZyb20gJy4vU2ltQ29ubmVjdENvbm5lY3Rpb24nO1xuZXhwb3J0ICogZnJvbSAnLi9TaW1Db25uZWN0U29ja2V0JztcbmV4cG9ydCAqIGZyb20gJy4vZmxhZ3MvRXZlbnRGbGFnJztcbmV4cG9ydCAqIGZyb20gJy4vZmxhZ3MvRGF0YVJlcXVlc3RGbGFnJztcbmV4cG9ydCAqIGZyb20gJy4vZmxhZ3MvRGF0YVNldEZsYWcnO1xuZXhwb3J0ICogZnJvbSAnLi9mbGFncy9DbGllbnREYXRhUmVxdWVzdEZsYWcnO1xuZXhwb3J0ICogZnJvbSAnLi9mYWNpbGl0eS9GYWNpbGl0eUFpcnBvcnQnO1xuZXhwb3J0ICogZnJvbSAnLi9mYWNpbGl0eS9GYWNpbGl0eU5EQic7XG5leHBvcnQgKiBmcm9tICcuL2ZhY2lsaXR5L0ZhY2lsaXR5Vk9SJztcbmV4cG9ydCAqIGZyb20gJy4vZmFjaWxpdHkvRmFjaWxpdHlXYXlwb2ludCc7XG5leHBvcnQgKiBmcm9tICcuL1R5cGVzJztcblxuZXhwb3J0ICogZnJvbSAnLi9yZWN2JztcbmV4cG9ydCAqIGZyb20gJy4vZHRvJztcbmV4cG9ydCB7IFJhd0J1ZmZlciB9IGZyb20gJy4vUmF3QnVmZmVyJztcblxuZXhwb3J0IGludGVyZmFjZSBPcGVuRXZlbnQge1xuICAgIHJlY3ZPcGVuOiBSZWN2T3BlbjtcbiAgICBoYW5kbGU6IFNpbUNvbm5lY3RDb25uZWN0aW9uO1xufVxuXG4vKipcbiAqIFRyeSBvcGVuaW5nIGEgY29ubmVjdGlvbiB0byBTaW1Db25uZWN0XG4gKlxuICogQHBhcmFtIGFwcE5hbWUgLSBBbiBhcHByb3ByaWF0ZSBuYW1lIGZvciB0aGUgY2xpZW50IHByb2dyYW1cbiAqIEBwYXJhbSBwcm90b2NvbFZlcnNpb24gLSBMb3dlc3QgcHJvdG9jb2wgdmVyc2lvblxuICogQHBhcmFtIG9wdGlvbnMgLSBVc2VkIGZvciBjb25uZWN0aW5nIHRvIGEgcmVtb3RlIGluc3RhbmNlIG9mIFNpbUNvbm5lY3QuIElmIG9taXR0ZWQgaXQgd2lsbCBhdHRlbXB0IHRvIHJlYWQgY29ubmVjdGlvbiBwYXJhbWV0ZXJzIGZyb20gdGhlIGZvbGxvd2luZyBzb3VyY2VzOlxuICpcbiAqIC0gSVAgKyBwb3J0IG51bWJlciBmcm9tIFNpbUNvbm5lY3QuY2ZnIGluIHRoZSBub2RlLmpzIGluc3RhbGxhdGlvbiBkaXJlY3RvcnkgKG9yIHRoZSBpbnN0YWxsYXRpb24gZGlyZWN0b3J5IG9mIHRoZSBFbGVjdHJvbiBhcHApXG4gKlxuICogLSBJUCArIHBvcnQgbnVtYmVyIGZyb20gU2ltQ29ubmVjdC5jZmcgaW4gdGhlIHVzZXIncyBob21lIGRpcmVjdG9yeVxuICpcbiAqIC0gTmFtZWQgcGlwZSBmb3VuZCBpbiB0aGUgV2luZG93cyByZWdpc3RyeSAoYXZhaWxhYmxlIHdoZW4gdGhlIHNpbSBoYXMgc3RhcnRlZClcbiAqXG4gKiAtIFBvcnQgbnVtYmVyLCBmb3IgdXNlIHdpdGggbG9jYWxob3N0LCBmb3VuZCBpbiB0aGUgV2luZG93cyByZWdpc3RyeSAoYXZhaWxhYmxlIHdoZW4gdGhlIHNpbSBoYXMgc3RhcnRlZClcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvcGVuKFxuICAgIGFwcE5hbWU6IHN0cmluZyxcbiAgICBwcm90b2NvbFZlcnNpb246IFByb3RvY29sLFxuICAgIG9wdGlvbnM/OiBDb25uZWN0aW9uT3B0aW9uc1xuKTogUHJvbWlzZTxPcGVuRXZlbnQ+IHtcbiAgICBjb25zdCBzaW1Db25uZWN0Q29ubmVjdGlvbiA9IG5ldyBTaW1Db25uZWN0Q29ubmVjdGlvbihhcHBOYW1lLCBwcm90b2NvbFZlcnNpb24pO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxPcGVuRXZlbnQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgc2ltQ29ubmVjdENvbm5lY3Rpb24ub24oJ29wZW4nLCBkYXRhID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoeyByZWN2T3BlbjogZGF0YSwgaGFuZGxlOiBzaW1Db25uZWN0Q29ubmVjdGlvbiB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNpbUNvbm5lY3RDb25uZWN0aW9uLm9uKCdlcnJvcicsIGVycm9yID0+IHtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgICBzaW1Db25uZWN0Q29ubmVjdGlvbi5jb25uZWN0KG9wdGlvbnMpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgdHlwZSBDb25uZWN0aW9uSGFuZGxlID0gSW5zdGFuY2VUeXBlPHR5cGVvZiBTaW1Db25uZWN0Q29ubmVjdGlvbj47XG4iXX0=