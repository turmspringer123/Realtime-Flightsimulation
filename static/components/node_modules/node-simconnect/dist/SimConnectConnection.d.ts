/// <reference types="node" />
/// <reference types="node" />
import { EventEmitter } from 'events';
import { SimConnectDataType } from './enums/SimConnectDataType';
import { SimConnectPeriod } from './enums/SimConnectPeriod';
import { SimObjectType } from './enums/SimObjectType';
import { RawBuffer } from './RawBuffer';
import { NotificationPriority } from './enums/NotificationPriority';
import { IcaoType, InitPosition, SimConnectData } from './dto';
import { TextType } from './enums/TextType';
import { FacilityListType } from './enums/FacilityListType';
import { ClientDataPeriod } from './enums/ClientDataPeriod';
import { Protocol } from './enums/Protocol';
import { SimConnectSocket } from './SimConnectSocket';
import { RecvAirportList, RecvAssignedObjectID, RecvCloudState, RecvCustomAction, RecvEvent, RecvEventAddRemove, RecvEventFilename, RecvEventFrame, RecvEventRaceEnd, RecvEventRaceLap, RecvEventWeatherMode, RecvException, RecvNDBList, RecvOpen, RecvReservedKey, RecvSimObjectData, RecvSystemState, RecvVORList, RecvWaypointList, RecvWeatherObservation } from './recv';
import { DataRequestFlag } from './flags/DataRequestFlag';
import { EventFlag } from './flags/EventFlag';
import { ClientDataRequestFlag } from './flags/ClientDataRequestFlag';
import { ClientDataDefinitionId, ClientDataId, ClientEventId, DataDefinitionId, DataRequestId, InputGroupId, NotificationGroupId, ObjectId } from './Types';
import { RecvFacilityData } from './recv/RecvFacilityData';
import { RecvFacilityDataEnd } from './recv/RecvFacilityDataEnd';
import { RecvFacilityMinimalList } from './recv/RecvFacilityMinimalList';
import { RecvEventEx1 } from './recv/RecvEventEx1';
interface SimConnectRecvEvents {
    open: (recvOpen: RecvOpen) => void;
    close: () => void;
    error: (error: Error) => void;
    quit: () => void;
    exception: (recvException: RecvException) => void;
    event: (recvEvent: RecvEvent) => void;
    eventEx1: (recvEvent: RecvEventEx1) => void;
    airportList: (recvAirportList: RecvAirportList) => void;
    vorList: (recvVORList: RecvVORList) => void;
    ndbList: (recvNDBList: RecvNDBList) => void;
    waypointList: (recvWaypointList: RecvWaypointList) => void;
    reservedKey: (recvReservedKey: RecvReservedKey) => void;
    customAction: (recvCustomAction: RecvCustomAction) => void;
    clientData: (recvSimObjectData: RecvSimObjectData) => void;
    eventWeatherMode: (recvWeatherMode: RecvEventWeatherMode) => void;
    assignedObjectID: (recvAssignedObjectID: RecvAssignedObjectID) => void;
    eventFilename: (recvEventFilename: RecvEventFilename) => void;
    eventFrame: (recvEventFrame: RecvEventFrame) => void;
    eventAddRemove: (recvEvent: RecvEventAddRemove) => void;
    simObjectData: (recvSimObjectData: RecvSimObjectData) => void;
    simObjectDataByType: (recvSimObjectData: RecvSimObjectData) => void;
    systemState: (recvSystemState: RecvSystemState) => void;
    weatherObservation: (recvWeatherObservation: RecvWeatherObservation) => void;
    cloudState: (recvCloudState: RecvCloudState) => void;
    eventMultiplayerServerStarted: () => void;
    eventMultiplayerClientStarted: () => void;
    eventMultiplayerSessionEnded: () => void;
    eventRaceEnd: (recvEventRaceEnd: RecvEventRaceEnd) => void;
    eventRaceLap: (recvEventRaceLap: RecvEventRaceLap) => void;
    facilityData: (recvFacilityData: RecvFacilityData) => void;
    facilityDataEnd: (recvFacilityDataEnd: RecvFacilityDataEnd) => void;
    facilityMinimalList: (recvFacilityMinimalList: RecvFacilityMinimalList) => void;
}
type ConnectionOptions = {
    host: string;
    port: number;
} | {
    simConnectCfgIndex: number;
} | {
    remote: {
        host: string;
        port: number;
    };
};
declare class SimConnectConnection extends EventEmitter {
    private readonly _appName;
    private readonly _writeBuffer;
    private readonly _ourProtocol;
    _clientSocket: SimConnectSocket;
    private _openTimeout;
    private _packetsSent;
    constructor(appName: string, protocolVersion: Protocol);
    on<U extends keyof SimConnectRecvEvents>(event: U, listener: SimConnectRecvEvents[U]): this;
    emit<U extends keyof SimConnectRecvEvents>(event: U, ...args: Parameters<SimConnectRecvEvents[U]>): boolean;
    connect(options?: ConnectionOptions): void;
    addToDataDefinition(dataDefinitionId: DataDefinitionId, datumName: string, unitsName: string | null, dataType?: SimConnectDataType, epsilon?: number, datumId?: number): void;
    requestDataOnSimObject(dataRequestId: DataRequestId, dataDefinitionId: DataDefinitionId, objectId: ObjectId, period: SimConnectPeriod, flags?: DataRequestFlag, origin?: number, interval?: number, limit?: number): void;
    clearDataDefinition(dataDefinitionId: DataDefinitionId): void;
    requestDataOnSimObjectType(dataRequestId: DataRequestId, dataDefinitionId: DataDefinitionId, radiusMeters: number, type: SimObjectType): void;
    subscribeToSystemEvent(clientEventId: ClientEventId, eventName: string): void;
    unsubscribeFromSystemEvent(clientEventId: ClientEventId): void;
    requestSystemState(dataRequestId: DataRequestId, state: string): void;
    setSystemState(state: string, paramInt: number, paramFloat: number, paramString: string): void;
    addClientEventToNotificationGroup(notificationGroupId: NotificationGroupId, clientEventId: ClientEventId, maskable: boolean): void;
    mapClientEventToSimEvent(clientEventId: ClientEventId, eventName?: string): void;
    transmitClientEvent(objectId: ObjectId, clientEventId: ClientEventId, data: number, notificationGroupId: NotificationGroupId, flags: EventFlag): void;
    setSystemEventState(clientEventId: ClientEventId, state: boolean): void;
    removeClientEvent(notificationGroupId: NotificationGroupId, clientEventId: ClientEventId): void;
    setNotificationGroupPriority(notificationGroupId: NotificationGroupId, priority: NotificationPriority): void;
    clearNotificationGroup(notificationGroupId: NotificationGroupId): void;
    requestNotificationGroup(notificationGroupId: NotificationGroupId, reserved: number, flags: number): void;
    setDataOnSimObject(dataDefinitionId: DataDefinitionId, objectId: ObjectId, data: {
        buffer: RawBuffer;
        arrayCount: number;
        tagged: boolean;
    } | SimConnectData[]): void;
    mapInputEventToClientEvent(inputGroupId: InputGroupId, inputDefinition: string, clientEventDownID: ClientEventId, downValue?: number, clientEventUpID?: ClientEventId, upValue?: number, maskable?: boolean): void;
    setInputGroupPriority(inputGroupId: InputGroupId, priority: NotificationPriority): void;
    removeInputEvent(inputGroupId: InputGroupId, inputDefinition: string): void;
    clearInputGroup(inputGroupId: InputGroupId): void;
    setInputGroupState(inputGroupId: InputGroupId, state: boolean): void;
    requestReservedKey(clientEventId: ClientEventId, keyChoice1?: string, keyChoice2?: string, keyChoice3?: string): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherRequestInterpolatedObservation(dataRequestId: DataRequestId, lat: number, lon: number, alt: number): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherRequestObservationAtStation(dataRequestId: DataRequestId, ICAO: string): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherRequestObservationAtNearestStation(dataRequestId: DataRequestId, lat: number, lon: number): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherCreateStation(dataRequestId: DataRequestId, ICAO: string, name: string, lat: number, lon: number, alt: number): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherRemoveStation(dataRequestId: DataRequestId, ICAO: string): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherSetObservation(seconds: number, metar: string): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherSetModeServer(port: number, seconds: number): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherSetModeTheme(themeName: string): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherSetModeGlobal(): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherSetModeCustom(): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherSetDynamicUpdateRate(rate: number): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherRequestCloudState(dataRequestId: DataRequestId, minLat: number, minLon: number, minAlt: number, maxLat: number, maxLon: number, maxAlt: number, flags?: number): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherCreateThermal(dataRequestId: DataRequestId, lat: number, lon: number, alt: number, radius: number, height: number, coreRate: number, coreTurbulence: number, sinkRate: number, sinkTurbulence: number, coreSize: number, coreTransitionSize: number, sinkLayerSize: number, sinkTransitionSize: number): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherRemoveThermal(objectId: ObjectId): void;
    aICreateParkedATCAircraft(containerTitle: string, tailNumber: string, airportID: string, dataRequestId: DataRequestId): void;
    aICreateEnrouteATCAircraft(containerTitle: string, tailNumber: string, flightNumber: number, flightPlanPath: string, flightPlanPosition: number, touchAndGo: boolean, dataRequestId: DataRequestId): void;
    aICreateNonATCAircraft(containerTitle: string, tailNumber: string, initPos: InitPosition, dataRequestId: DataRequestId): void;
    aICreateSimulatedObject(containerTitle: string, initPos: InitPosition, dataRequestId: DataRequestId): void;
    aIReleaseControl(objectId: ObjectId, dataRequestId: DataRequestId): void;
    aIRemoveObject(objectId: ObjectId, dataRequestId: DataRequestId): void;
    aISetAircraftFlightPlan(objectId: ObjectId, flightPlanPath: string, dataRequestId: DataRequestId): void;
    executeMissionAction(guidInstanceId: Buffer): void;
    completeCustomMissionAction(guidInstanceId: Buffer): void;
    requestResponseTimes(nCount: number): void;
    cameraSetRelative6DOF(deltaX: number, deltaY: number, deltaZ: number, pitchDeg: number, bankDeg: number, headingDeg: number): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    menuAddItem(menuItem: string, menuEventId: ClientEventId, data: number): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    menuDeleteItem(menuEventId: ClientEventId): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    menuAddSubItem(menuEventId: ClientEventId, menuItem: string, subMenuEventId: ClientEventId, data: number): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    menuDeleteSubItem(menuEventId: ClientEventId, subMenuEventId: ClientEventId): void;
    mapClientDataNameToID(clientDataName: string, clientDataId: ClientDataId): void;
    createClientData(clientDataId: ClientDataId, size: number, readOnly: boolean): void;
    addToClientDataDefinition(dataDefinitionId: DataDefinitionId, offset: number, sizeOrType: number, epsilon?: number, datumId?: number): void;
    clearClientDataDefinition(dataDefinitionId: DataDefinitionId): void;
    requestClientData<O extends number, I extends number, L extends number>(clientDataId: ClientDataId, dataRequestId: DataRequestId, clientDataDefineID: ClientDataDefinitionId, period: ClientDataPeriod, flags: ClientDataRequestFlag, origin?: O, interval?: I, limit?: L): void;
    setClientData(clientDataId: ClientDataId, clientDataDefineID: ClientDataDefinitionId, reserved: number, arrayCount: number, unitSize: number, data: Buffer): void;
    flightLoad(fileName: string): void;
    flightSave(fileName: string, title: string | null, description: string, flags?: number): void;
    flightPlanLoad(fileName: string): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    text(type: TextType, timeSeconds: number, clientEventId: ClientEventId, message: string): void;
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    menu(timeSeconds: number, clientEventId: ClientEventId, title?: string, prompt?: string, ...items: string[]): void;
    subscribeToFacilities(type: FacilityListType, clientEventId: ClientEventId): void;
    subscribeToFacilitiesEx1(type: FacilityListType, newElemInRangeRequestID: DataRequestId, oldElemOutRangeRequestID: DataRequestId): void;
    unSubscribeToFacilities(type: FacilityListType): void;
    unSubscribeToFacilitiesEx1(type: FacilityListType, unsubscribeNewInRange: boolean, unsubscribeOldOutRange: boolean): void;
    requestFacilitiesList(type: FacilityListType, clientEventId: ClientEventId): void;
    requestFacilitiesListEx1(type: FacilityListType, clientEventId: ClientEventId): void;
    transmitClientEventEx(objectId: ObjectId, clientEventId: ClientEventId, notificationGroupId: NotificationGroupId, flags: EventFlag, data0?: number, data1?: number, data2?: number, data3?: number, data4?: number): void;
    addToFacilityDefinition(dataDefinitionId: DataDefinitionId, fieldName: string): void;
    requestFacilityData(dataDefinitionId: DataDefinitionId, dataRequestId: DataRequestId, icao: string, region?: string, type?: IcaoType): void;
    close(): void;
    getLastSentPacketID(): number;
    private _handleMessage;
    private _resetBuffer;
    private _sendPacket;
    private _open;
}
export { SimConnectConnection, ConnectionOptions, SimConnectRecvEvents };
//# sourceMappingURL=SimConnectConnection.d.ts.map