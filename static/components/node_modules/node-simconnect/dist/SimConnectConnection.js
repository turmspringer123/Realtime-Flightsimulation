"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimConnectConnection = void 0;
const events_1 = require("events");
const SimConnectDataType_1 = require("./enums/SimConnectDataType");
const RawBuffer_1 = require("./RawBuffer");
const connectionParameters_1 = require("./connectionParameters");
const TextType_1 = require("./enums/TextType");
const Protocol_1 = require("./enums/Protocol");
const SimConnectSocket_1 = require("./SimConnectSocket");
const recv_1 = require("./recv");
const DataSetFlag_1 = require("./flags/DataSetFlag");
const SimConnectConstants_1 = require("./SimConnectConstants");
const RecvFacilityData_1 = require("./recv/RecvFacilityData");
const RecvFacilityDataEnd_1 = require("./recv/RecvFacilityDataEnd");
const RecvFacilityMinimalList_1 = require("./recv/RecvFacilityMinimalList");
const RecvEventEx1_1 = require("./recv/RecvEventEx1");
const RECEIVE_SIZE = 65536;
const openPacketData = {
    [Protocol_1.Protocol.FSX_RTM]: {
        major: 0,
        minor: 0,
        buildMajor: 60905,
        buildMinor: 0,
        alias: 'XSF',
    },
    [Protocol_1.Protocol.FSX_SP1]: {
        major: 10,
        minor: 0,
        buildMajor: 61355,
        buildMinor: 0,
        alias: 'XSF',
    },
    [Protocol_1.Protocol.FSX_SP2]: {
        major: 10,
        minor: 0,
        buildMajor: 61259,
        buildMinor: 0,
        alias: 'XSF',
    },
    [Protocol_1.Protocol.KittyHawk]: {
        major: 11,
        minor: 0,
        buildMajor: 62651,
        buildMinor: 3,
        alias: 'HK', // "Hawk" + "Kitty"?
    },
};
var SimConnectError;
(function (SimConnectError) {
    SimConnectError["UnknownHost"] = "Unknown host";
    SimConnectError["GuidInvalidSize"] = "GUID is not 16 bytes long";
    SimConnectError["Unimplemented"] = "Not yet implemented";
    SimConnectError["VersionMismatch"] = "Invalid version2";
    SimConnectError["PacketTooLarge"] = "Packet too large";
    SimConnectError["InvalidRead"] = "Invalid read";
    SimConnectError["InvalidProtocol"] = "Invalid protocol version";
    SimConnectError["BadVersion"] = "Unsupported protocol version";
})(SimConnectError || (SimConnectError = {}));
class SimConnectConnection extends events_1.EventEmitter {
    constructor(appName, protocolVersion) {
        super();
        this._appName = appName;
        this._packetsSent = 0;
        this._ourProtocol = protocolVersion;
        this._writeBuffer = new RawBuffer_1.RawBuffer(RECEIVE_SIZE);
        this._openTimeout = null;
        this._clientSocket = new SimConnectSocket_1.SimConnectSocket();
        this._clientSocket.on('connect', this._open.bind(this));
        this._clientSocket.on('data', this._handleMessage.bind(this));
        this._clientSocket.on('close', () => this.emit('close'));
        this._clientSocket.on('error', (connectError) => this.emit('error', connectError));
    }
    on(event, listener) {
        return super.on(event, listener);
    }
    emit(event, ...args) {
        return super.emit(event, ...args);
    }
    connect(options) {
        if (options && 'host' in options && 'port' in options) {
            this._clientSocket.connect(Object.assign({ type: 'ipv4' }, options));
        }
        else if (options && 'remote' in options) {
            // For backwards-compatibility
            this._clientSocket.connect(Object.assign({ type: 'ipv4' }, options.remote));
        }
        else {
            (0, connectionParameters_1.autodetectServerAddress)(options === null || options === void 0 ? void 0 : options.simConnectCfgIndex).then((address) => {
                this._clientSocket.connect(address);
            });
        }
    }
    addToDataDefinition(dataDefinitionId, datumName, unitsName, dataType, epsilon, datumId) {
        this._resetBuffer();
        this._writeBuffer.writeInt(dataDefinitionId);
        this._writeBuffer.writeString256(datumName);
        this._writeBuffer.writeString256(unitsName);
        this._writeBuffer.writeInt(dataType === undefined ? SimConnectDataType_1.SimConnectDataType.FLOAT64 : dataType);
        this._writeBuffer.writeFloat(epsilon || 0);
        this._writeBuffer.writeInt(datumId === undefined ? SimConnectConstants_1.SimConnectConstants.UNUSED : datumId);
        this._sendPacket(0x0c);
    }
    requestDataOnSimObject(dataRequestId, dataDefinitionId, objectId, period, flags, origin, interval, limit) {
        this._resetBuffer();
        this._writeBuffer.writeInt(dataRequestId);
        this._writeBuffer.writeInt(dataDefinitionId);
        this._writeBuffer.writeInt(objectId);
        this._writeBuffer.writeInt(period);
        this._writeBuffer.writeInt(flags || 0);
        this._writeBuffer.writeInt(origin || 0);
        this._writeBuffer.writeInt(interval || 0);
        this._writeBuffer.writeInt(limit || 0);
        this._sendPacket(0x0e);
    }
    clearDataDefinition(dataDefinitionId) {
        this._resetBuffer();
        this._writeBuffer.writeInt(dataDefinitionId);
        this._sendPacket(0x0d);
    }
    requestDataOnSimObjectType(dataRequestId, dataDefinitionId, radiusMeters, type) {
        this._resetBuffer();
        this._writeBuffer.writeInt(dataRequestId);
        this._writeBuffer.writeInt(dataDefinitionId);
        this._writeBuffer.writeInt(radiusMeters);
        this._writeBuffer.writeInt(type);
        this._sendPacket(0x0f);
    }
    subscribeToSystemEvent(clientEventId, eventName) {
        this._resetBuffer();
        this._writeBuffer.writeInt(clientEventId);
        this._writeBuffer.writeString256(eventName);
        this._sendPacket(0x17);
    }
    unsubscribeFromSystemEvent(clientEventId) {
        this._resetBuffer();
        this._writeBuffer.writeInt(clientEventId);
        this._sendPacket(0x18);
    }
    requestSystemState(dataRequestId, state) {
        this._resetBuffer();
        this._writeBuffer.writeInt(dataRequestId);
        this._writeBuffer.writeString256(state);
        this._sendPacket(0x35);
    }
    setSystemState(state, paramInt, paramFloat, paramString) {
        this._resetBuffer();
        this._writeBuffer.writeString256(state);
        this._writeBuffer.writeInt(paramInt);
        this._writeBuffer.writeFloat(paramFloat);
        this._writeBuffer.writeString256(paramString);
        this._writeBuffer.writeInt(0);
        this._sendPacket(0x36);
    }
    addClientEventToNotificationGroup(notificationGroupId, clientEventId, maskable) {
        this._resetBuffer();
        this._writeBuffer.writeInt(notificationGroupId);
        this._writeBuffer.writeInt(clientEventId);
        this._writeBuffer.writeInt(maskable ? 1 : 0);
        this._sendPacket(0x07);
    }
    mapClientEventToSimEvent(clientEventId, eventName) {
        this._resetBuffer();
        this._writeBuffer.writeInt(clientEventId);
        this._writeBuffer.writeString256(eventName || '');
        this._sendPacket(0x04);
    }
    transmitClientEvent(objectId, clientEventId, data, notificationGroupId, flags) {
        this._resetBuffer();
        this._writeBuffer.writeInt(objectId);
        this._writeBuffer.writeInt(clientEventId);
        this._writeBuffer.writeInt(data);
        this._writeBuffer.writeInt(notificationGroupId);
        this._writeBuffer.writeInt(flags);
        this._sendPacket(0x05);
    }
    setSystemEventState(clientEventId, state) {
        this._resetBuffer();
        this._writeBuffer.writeInt(clientEventId);
        this._writeBuffer.writeInt(state ? 1 : 0);
        this._sendPacket(0x06);
    }
    removeClientEvent(notificationGroupId, clientEventId) {
        this._resetBuffer();
        this._writeBuffer.writeInt(notificationGroupId);
        this._writeBuffer.writeInt(clientEventId);
        this._sendPacket(0x08);
    }
    setNotificationGroupPriority(notificationGroupId, priority) {
        this._resetBuffer();
        this._writeBuffer.writeInt(notificationGroupId);
        this._writeBuffer.writeInt(priority);
        this._sendPacket(0x09);
    }
    clearNotificationGroup(notificationGroupId) {
        this._resetBuffer();
        this._writeBuffer.writeInt(notificationGroupId);
        this._sendPacket(0x0a);
    }
    requestNotificationGroup(notificationGroupId, reserved, flags) {
        this._resetBuffer();
        this._writeBuffer.writeInt(notificationGroupId);
        this._writeBuffer.writeInt(reserved);
        this._writeBuffer.writeInt(flags);
        this._sendPacket(0x0b);
    }
    setDataOnSimObject(dataDefinitionId, objectId, data) {
        this._resetBuffer();
        this._writeBuffer.writeInt(dataDefinitionId);
        this._writeBuffer.writeInt(objectId);
        if (data instanceof Array) {
            this._writeBuffer.writeInt(DataSetFlag_1.DataSetFlag.DEFAULT);
            this._writeBuffer.writeInt(data.length);
            this._writeBuffer.writeInt(0); // Just a placeholder for array unit size
            const arrayStartPos = this._writeBuffer.getOffset();
            data.forEach(simConnectData => {
                simConnectData.write(this._writeBuffer);
            });
            const arrayTotalSize = this._writeBuffer.getOffset() - arrayStartPos;
            const unitSize = arrayTotalSize / data.length;
            this._writeBuffer.writeInt(unitSize, arrayStartPos - 4); // Replace placeholder
        }
        else {
            const { tagged, arrayCount, buffer } = data;
            this._writeBuffer.writeInt(tagged ? DataSetFlag_1.DataSetFlag.TAGGED : DataSetFlag_1.DataSetFlag.DEFAULT);
            this._writeBuffer.writeInt(arrayCount === 0 ? 1 : arrayCount);
            const bytes = buffer.getBuffer();
            this._writeBuffer.writeInt(bytes.length);
            this._writeBuffer.write(bytes);
        }
        this._sendPacket(0x10);
    }
    mapInputEventToClientEvent(inputGroupId, inputDefinition, clientEventDownID, downValue, clientEventUpID, upValue, maskable) {
        this._resetBuffer();
        this._writeBuffer.writeInt(inputGroupId);
        this._writeBuffer.writeString256(inputDefinition);
        this._writeBuffer.writeInt(clientEventDownID);
        this._writeBuffer.writeInt(downValue || 0);
        this._writeBuffer.writeInt(clientEventUpID === undefined ? SimConnectConstants_1.SimConnectConstants.UNUSED : clientEventUpID);
        this._writeBuffer.writeInt(upValue || 0);
        this._writeBuffer.writeInt(maskable ? 1 : 0);
        this._sendPacket(0x11);
    }
    setInputGroupPriority(inputGroupId, priority) {
        this._resetBuffer();
        this._writeBuffer.writeInt(inputGroupId);
        this._writeBuffer.writeInt(priority);
        this._sendPacket(0x12);
    }
    removeInputEvent(inputGroupId, inputDefinition) {
        this._resetBuffer();
        this._writeBuffer.writeInt(inputGroupId);
        this._writeBuffer.writeString256(inputDefinition);
        this._sendPacket(0x13);
    }
    clearInputGroup(inputGroupId) {
        this._resetBuffer();
        this._writeBuffer.writeInt(inputGroupId);
        this._sendPacket(0x14);
    }
    setInputGroupState(inputGroupId, state) {
        this._resetBuffer();
        this._writeBuffer.writeInt(inputGroupId);
        this._writeBuffer.writeInt(state ? 1 : 0);
        this._sendPacket(0x15);
    }
    requestReservedKey(clientEventId, keyChoice1, keyChoice2, keyChoice3) {
        this._resetBuffer();
        this._writeBuffer.writeInt(clientEventId);
        this._writeBuffer.writeString30(keyChoice1 || '');
        this._writeBuffer.writeString30(keyChoice2 || '');
        this._writeBuffer.writeString30(keyChoice3 || '');
        this._sendPacket(0x16);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherRequestInterpolatedObservation(dataRequestId, lat, lon, alt) {
        this._resetBuffer();
        this._writeBuffer.writeInt(dataRequestId);
        this._writeBuffer.writeFloat(lat);
        this._writeBuffer.writeFloat(lon);
        this._writeBuffer.writeFloat(alt);
        this._sendPacket(0x19);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherRequestObservationAtStation(dataRequestId, ICAO) {
        this._resetBuffer();
        this._writeBuffer.writeInt(dataRequestId);
        this._writeBuffer.writeString(ICAO, 5); // ICAO is 4 chars, null terminated
        this._sendPacket(0x1a);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherRequestObservationAtNearestStation(dataRequestId, lat, lon) {
        this._resetBuffer();
        this._writeBuffer.writeInt(dataRequestId);
        this._writeBuffer.writeFloat(lat);
        this._writeBuffer.writeFloat(lon);
        this._sendPacket(0x1b);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherCreateStation(dataRequestId, ICAO, name, lat, lon, alt) {
        this._resetBuffer();
        this._writeBuffer.writeInt(dataRequestId);
        this._writeBuffer.writeString(ICAO, 5);
        this._writeBuffer.writeString(name, 256);
        this._writeBuffer.writeFloat(lat);
        this._writeBuffer.writeFloat(lon);
        this._writeBuffer.writeFloat(alt);
        this._sendPacket(0x1c);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherRemoveStation(dataRequestId, ICAO) {
        this._resetBuffer();
        this._writeBuffer.writeInt(dataRequestId);
        this._writeBuffer.writeString(ICAO, 5);
        this._sendPacket(0x1d);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherSetObservation(seconds, metar) {
        this._resetBuffer();
        this._writeBuffer.writeInt(seconds);
        this._writeBuffer.writeString(metar);
        this._writeBuffer.writeByte(0); // null terminated
        this._sendPacket(0x1e);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherSetModeServer(port, seconds) {
        this._resetBuffer();
        this._writeBuffer.writeInt(port);
        this._writeBuffer.writeInt(seconds);
        this._sendPacket(0x1f);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherSetModeTheme(themeName) {
        this._resetBuffer();
        this._writeBuffer.writeString(themeName, 256);
        this._sendPacket(0x20);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherSetModeGlobal() {
        this._resetBuffer();
        this._sendPacket(0x21);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherSetModeCustom() {
        this._resetBuffer();
        this._sendPacket(0x22);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherSetDynamicUpdateRate(rate) {
        this._resetBuffer();
        this._writeBuffer.writeInt(rate);
        this._sendPacket(0x23);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherRequestCloudState(dataRequestId, minLat, minLon, minAlt, maxLat, maxLon, maxAlt, flags) {
        this._resetBuffer();
        this._writeBuffer.writeInt(dataRequestId);
        this._writeBuffer.writeFloat(minLat);
        this._writeBuffer.writeFloat(minLon);
        this._writeBuffer.writeFloat(minAlt);
        this._writeBuffer.writeFloat(maxLat);
        this._writeBuffer.writeFloat(maxLon);
        this._writeBuffer.writeFloat(maxAlt);
        this._writeBuffer.writeInt(flags || 0);
        this._sendPacket(0x24);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherCreateThermal(dataRequestId, lat, lon, alt, radius, height, coreRate, coreTurbulence, sinkRate, sinkTurbulence, coreSize, coreTransitionSize, sinkLayerSize, sinkTransitionSize) {
        this._resetBuffer();
        this._writeBuffer.writeInt(dataRequestId);
        this._writeBuffer.writeFloat(lat);
        this._writeBuffer.writeFloat(lon);
        this._writeBuffer.writeFloat(alt);
        this._writeBuffer.writeFloat(radius);
        this._writeBuffer.writeFloat(height);
        this._writeBuffer.writeFloat(coreRate);
        this._writeBuffer.writeFloat(coreTurbulence);
        this._writeBuffer.writeFloat(sinkRate);
        this._writeBuffer.writeFloat(sinkTurbulence);
        this._writeBuffer.writeFloat(coreSize);
        this._writeBuffer.writeFloat(coreTransitionSize);
        this._writeBuffer.writeFloat(sinkLayerSize);
        this._writeBuffer.writeFloat(sinkTransitionSize);
        this._sendPacket(0x25);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    weatherRemoveThermal(objectId) {
        this._resetBuffer();
        this._writeBuffer.writeInt(objectId);
        this._sendPacket(0x26);
    }
    aICreateParkedATCAircraft(containerTitle, tailNumber, airportID, dataRequestId) {
        this._resetBuffer();
        this._writeBuffer.writeString(containerTitle, 256);
        this._writeBuffer.writeString(tailNumber, 12);
        this._writeBuffer.writeString(airportID, 5);
        this._writeBuffer.writeInt(dataRequestId);
        this._sendPacket(0x27);
    }
    aICreateEnrouteATCAircraft(containerTitle, tailNumber, flightNumber, flightPlanPath, flightPlanPosition, touchAndGo, dataRequestId) {
        this._resetBuffer();
        this._writeBuffer.writeString(containerTitle, 256);
        this._writeBuffer.writeString(tailNumber, 12);
        this._writeBuffer.writeInt(flightNumber);
        this._writeBuffer.writeString(flightPlanPath, 260);
        this._writeBuffer.writeDouble(flightPlanPosition);
        this._writeBuffer.writeInt(touchAndGo ? 1 : 0);
        this._writeBuffer.writeInt(dataRequestId);
        this._sendPacket(0x28);
    }
    aICreateNonATCAircraft(containerTitle, tailNumber, initPos, dataRequestId) {
        this._resetBuffer();
        this._writeBuffer.writeString(containerTitle, 256);
        this._writeBuffer.writeString(tailNumber, 12);
        initPos.write(this._writeBuffer);
        this._writeBuffer.writeInt(dataRequestId);
        this._sendPacket(0x29);
    }
    aICreateSimulatedObject(containerTitle, initPos, dataRequestId) {
        this._resetBuffer();
        this._writeBuffer.writeString(containerTitle, 256);
        initPos.write(this._writeBuffer);
        this._writeBuffer.writeInt(dataRequestId);
        this._sendPacket(0x2a);
    }
    aIReleaseControl(objectId, dataRequestId) {
        this._resetBuffer();
        this._writeBuffer.writeInt(objectId);
        this._writeBuffer.writeInt(dataRequestId);
        this._sendPacket(0x2b);
    }
    aIRemoveObject(objectId, dataRequestId) {
        this._resetBuffer();
        this._writeBuffer.writeInt(objectId);
        this._writeBuffer.writeInt(dataRequestId);
        this._sendPacket(0x2c);
    }
    aISetAircraftFlightPlan(objectId, flightPlanPath, dataRequestId) {
        this._resetBuffer();
        this._writeBuffer.writeInt(objectId);
        this._writeBuffer.writeString(flightPlanPath, 260);
        this._writeBuffer.writeInt(dataRequestId);
        this._sendPacket(0x2d);
    }
    executeMissionAction(guidInstanceId) {
        if (guidInstanceId.length !== 16)
            throw Error(SimConnectError.GuidInvalidSize);
        this._resetBuffer();
        this._writeBuffer.write(guidInstanceId);
        this._sendPacket(0x2e);
    }
    completeCustomMissionAction(guidInstanceId) {
        if (guidInstanceId.length !== 16)
            throw Error(SimConnectError.GuidInvalidSize); // $NON-NLS-1$
        this._resetBuffer();
        this._writeBuffer.write(guidInstanceId);
        this._sendPacket(0x2f);
    }
    // eslint-disable-next-line
    requestResponseTimes(nCount) {
        // TODO: implement simconnect function
        // this one needs special care: it send a packet (id 0x03, one param : nCount)
        // and receive 8 float data (with response id 0x00010001) . Some calculations
        // has to be done
        throw Error(SimConnectError.Unimplemented);
    }
    cameraSetRelative6DOF(deltaX, deltaY, deltaZ, pitchDeg, bankDeg, headingDeg) {
        this._resetBuffer();
        this._writeBuffer.writeFloat(deltaX);
        this._writeBuffer.writeFloat(deltaY);
        this._writeBuffer.writeFloat(deltaZ);
        this._writeBuffer.writeFloat(pitchDeg);
        this._writeBuffer.writeFloat(bankDeg);
        this._writeBuffer.writeFloat(headingDeg);
        this._sendPacket(0x30);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    menuAddItem(menuItem, menuEventId, data) {
        this._resetBuffer();
        this._writeBuffer.writeString(menuItem, 256);
        this._writeBuffer.writeInt(menuEventId);
        this._writeBuffer.writeInt(data);
        this._sendPacket(0x31);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    menuDeleteItem(menuEventId) {
        this._resetBuffer();
        this._writeBuffer.writeInt(menuEventId);
        this._sendPacket(0x32);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    menuAddSubItem(menuEventId, menuItem, subMenuEventId, data) {
        this._resetBuffer();
        this._writeBuffer.writeInt(menuEventId);
        this._writeBuffer.writeString(menuItem, 256);
        this._writeBuffer.writeInt(subMenuEventId);
        this._writeBuffer.writeInt(data);
        this._sendPacket(0x33);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    menuDeleteSubItem(menuEventId, subMenuEventId) {
        // packet size 0x18
        // packet id 0x34
        this._resetBuffer();
        this._writeBuffer.writeInt(menuEventId);
        this._writeBuffer.writeInt(subMenuEventId);
        this._sendPacket(0x34);
    }
    mapClientDataNameToID(clientDataName, clientDataId) {
        this._resetBuffer();
        this._writeBuffer.writeString(clientDataName, 256);
        this._writeBuffer.writeInt(clientDataId);
        this._sendPacket(0x37);
    }
    createClientData(clientDataId, size, readOnly) {
        this._resetBuffer();
        this._writeBuffer.writeInt(clientDataId);
        this._writeBuffer.writeInt(size);
        this._writeBuffer.writeInt(readOnly ? 1 : 0);
        this._sendPacket(0x38);
    }
    addToClientDataDefinition(dataDefinitionId, offset, sizeOrType, epsilon, datumId) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        this._resetBuffer();
        this._writeBuffer.writeInt(dataDefinitionId);
        this._writeBuffer.writeInt(offset);
        this._writeBuffer.writeInt(sizeOrType);
        this._writeBuffer.writeFloat(epsilon || 0);
        this._writeBuffer.writeInt(datumId || 0);
        this._sendPacket(0x39);
    }
    clearClientDataDefinition(dataDefinitionId) {
        this._resetBuffer();
        this._writeBuffer.writeInt(dataDefinitionId);
        this._sendPacket(0x3a);
    }
    requestClientData(clientDataId, dataRequestId, clientDataDefineID, period, flags, origin, interval, limit) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        this._resetBuffer();
        this._writeBuffer.writeInt(clientDataId);
        this._writeBuffer.writeInt(dataRequestId);
        this._writeBuffer.writeInt(clientDataDefineID);
        this._writeBuffer.writeInt(period);
        this._writeBuffer.writeInt(flags);
        this._writeBuffer.writeInt(origin || 0);
        this._writeBuffer.writeInt(interval || 0);
        this._writeBuffer.writeInt(limit || 0);
        this._sendPacket(0x3b);
    }
    setClientData(clientDataId, clientDataDefineID, reserved, arrayCount, unitSize, data) {
        this._resetBuffer();
        this._writeBuffer.writeInt(clientDataId);
        this._writeBuffer.writeInt(clientDataDefineID);
        this._writeBuffer.writeInt(0); // do not use arg
        this._writeBuffer.writeInt(1); // do not use arg
        // TODO: add support for arrays https://github.com/mharj/jsimconnect/blob/master/src/flightsim/simconnect/SimConnect.java#L3803
        this._writeBuffer.writeInt(unitSize);
        this._writeBuffer.write(data);
        this._sendPacket(0x3c);
    }
    flightLoad(fileName) {
        // packet size 0x114
        // packet id 0x3D
        this._resetBuffer();
        this._writeBuffer.writeString(fileName, SimConnectConstants_1.SimConnectConstants.MAX_PATH);
        this._sendPacket(0x3d);
    }
    flightSave(fileName, title, description, flags // eslint-disable-line
    ) {
        // packet size 0x918 (SP1), 0xA1C (SP2)
        // packet id 0x3E
        this._resetBuffer();
        this._writeBuffer.writeString(fileName, SimConnectConstants_1.SimConnectConstants.MAX_PATH);
        if (this._ourProtocol >= Protocol_1.Protocol.FSX_SP2) {
            this._writeBuffer.writeString(title === null ? fileName : title, SimConnectConstants_1.SimConnectConstants.MAX_PATH);
        }
        this._writeBuffer.writeString(description, 2048);
        this._writeBuffer.writeInt(SimConnectConstants_1.SimConnectConstants.UNUSED);
        this._sendPacket(0x3e);
    }
    flightPlanLoad(fileName) {
        // packet size 0x114
        // packet id 0x3F
        this._resetBuffer();
        this._writeBuffer.writeString(fileName, SimConnectConstants_1.SimConnectConstants.MAX_PATH);
        this._sendPacket(0x3f);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    text(type, timeSeconds, clientEventId, message) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        // packet id 0x40
        this._resetBuffer();
        this._writeBuffer.writeInt(type);
        this._writeBuffer.writeFloat(timeSeconds);
        this._writeBuffer.writeInt(clientEventId);
        if (message !== null && message.length > 0) {
            this._writeBuffer.writeInt(message.length + 1);
            this._writeBuffer.writeString(message);
        }
        else {
            this._writeBuffer.writeInt(1);
        }
        this._writeBuffer.writeByte(0);
        this._sendPacket(0x40);
    }
    /**
     * @deprecated since MSFS (KittyHawk)
     */
    menu(timeSeconds, clientEventId, title, prompt, ...items) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        // packet id 0x40
        this._resetBuffer();
        this._writeBuffer.writeInt(TextType_1.TextType.MENU);
        this._writeBuffer.writeFloat(timeSeconds);
        this._writeBuffer.writeInt(clientEventId);
        this._writeBuffer.writeInt(0); // size, will be set later
        if (!title && !prompt && items.length === 0) {
            this._writeBuffer.writeByte(0);
        }
        else if (title && prompt) {
            this._writeBuffer.writeString(title);
            this._writeBuffer.writeByte(0);
            this._writeBuffer.writeString(prompt);
            this._writeBuffer.writeByte(0);
            items.forEach(s => {
                this._writeBuffer.writeString(s);
                this._writeBuffer.writeByte(0);
            });
        }
        // set size
        this._writeBuffer.writeInt(this._writeBuffer.getOffset() - 32, 28);
        this._sendPacket(0x40);
    }
    subscribeToFacilities(type, clientEventId) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        // ID 0x41
        this._resetBuffer();
        this._writeBuffer.writeInt(type);
        this._writeBuffer.writeInt(clientEventId);
        this._sendPacket(0x41);
    }
    subscribeToFacilitiesEx1(type, newElemInRangeRequestID, oldElemOutRangeRequestID) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        this._resetBuffer();
        this._writeBuffer.writeInt(type);
        this._writeBuffer.writeInt(newElemInRangeRequestID);
        this._writeBuffer.writeInt(oldElemOutRangeRequestID);
        this._sendPacket(0x47);
    }
    unSubscribeToFacilities(type) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        // ID 0x42
        this._resetBuffer();
        this._writeBuffer.writeInt(type);
        this._sendPacket(0x42);
    }
    unSubscribeToFacilitiesEx1(type, unsubscribeNewInRange, unsubscribeOldOutRange) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        this._resetBuffer();
        this._writeBuffer.writeInt(type);
        this._writeBuffer.writeString(unsubscribeNewInRange ? '1' : '0', 1);
        this._writeBuffer.writeString(unsubscribeOldOutRange ? '1' : '0', 1);
        this._sendPacket(0x48);
    }
    requestFacilitiesList(type, clientEventId) {
        if (this._ourProtocol < Protocol_1.Protocol.FSX_SP1)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        this._resetBuffer();
        this._writeBuffer.writeInt(type);
        this._writeBuffer.writeInt(clientEventId);
        this._sendPacket(0x43);
    }
    requestFacilitiesListEx1(type, clientEventId) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion); // $NON-NLS-1$
        this._resetBuffer();
        this._writeBuffer.writeInt(type);
        this._writeBuffer.writeInt(clientEventId);
        this._sendPacket(0x49);
    }
    transmitClientEventEx(objectId, clientEventId, notificationGroupId, flags, data0 = 0, data1 = 0, data2 = 0, data3 = 0, data4 = 0) {
        this._resetBuffer();
        this._writeBuffer.writeInt(objectId);
        this._writeBuffer.writeInt(clientEventId);
        this._writeBuffer.writeInt(notificationGroupId);
        this._writeBuffer.writeInt(flags);
        this._writeBuffer.writeInt(data0);
        this._writeBuffer.writeInt(data1);
        this._writeBuffer.writeInt(data2);
        this._writeBuffer.writeInt(data3);
        this._writeBuffer.writeInt(data4);
        this._sendPacket(0x44);
    }
    addToFacilityDefinition(dataDefinitionId, fieldName) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion);
        this._resetBuffer();
        this._writeBuffer.writeInt(dataDefinitionId);
        this._writeBuffer.writeString256(fieldName);
        this._sendPacket(0x45);
    }
    requestFacilityData(dataDefinitionId, dataRequestId, icao, region, type) {
        if (this._ourProtocol < Protocol_1.Protocol.KittyHawk)
            throw Error(SimConnectError.BadVersion);
        this._resetBuffer();
        this._writeBuffer.writeInt(dataDefinitionId);
        this._writeBuffer.writeInt(dataRequestId);
        this._writeBuffer.writeString(icao, 16);
        this._writeBuffer.writeString(region || '', 4);
        if (type === undefined) {
            // SimConnect_RequestFacilityData
            this._sendPacket(0x46);
        }
        else {
            // SimConnect_RequestFacilityData_EX1
            this._writeBuffer.writeString(type, 1);
            this._sendPacket(0x4a);
        }
    }
    close() {
        if (this._openTimeout !== null) {
            clearTimeout(this._openTimeout);
            this._openTimeout = null;
        }
        this._clientSocket.close();
    }
    getLastSentPacketID() {
        return this._packetsSent - 1;
    }
    _handleMessage({ packetTypeId, data }) {
        if (!(packetTypeId in SimConnectSocket_1.RecvID)) {
            console.log('Unknown packet type id', packetTypeId, data);
        }
        switch (packetTypeId) {
            case SimConnectSocket_1.RecvID.ID_NULL:
                break;
            case SimConnectSocket_1.RecvID.ID_EXCEPTION:
                this.emit('exception', new recv_1.RecvException(data));
                break;
            case SimConnectSocket_1.RecvID.ID_OPEN:
                if (this._openTimeout !== null) {
                    clearTimeout(this._openTimeout);
                    this._openTimeout = null;
                }
                this.emit('open', new recv_1.RecvOpen(data));
                break;
            case SimConnectSocket_1.RecvID.ID_QUIT:
                this.emit('quit');
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT:
                this.emit('event', new recv_1.RecvEvent(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_OBJECT_ADDREMOVE:
                this.emit('eventAddRemove', new recv_1.RecvEventAddRemove(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_FILENAME:
                this.emit('eventFilename', new recv_1.RecvEventFilename(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_FRAME:
                this.emit('eventFrame', new recv_1.RecvEventFrame(data));
                break;
            case SimConnectSocket_1.RecvID.ID_SIMOBJECT_DATA:
                this.emit('simObjectData', new recv_1.RecvSimObjectData(data));
                break;
            case SimConnectSocket_1.RecvID.ID_SIMOBJECT_DATA_BYTYPE:
                this.emit('simObjectDataByType', new recv_1.RecvSimObjectData(data));
                break;
            case SimConnectSocket_1.RecvID.ID_WEATHER_OBSERVATION:
                this.emit('weatherObservation', new recv_1.RecvWeatherObservation(data));
                break;
            case SimConnectSocket_1.RecvID.ID_CLOUD_STATE:
                this.emit('cloudState', new recv_1.RecvCloudState(data));
                break;
            case SimConnectSocket_1.RecvID.ID_ASSIGNED_OBJECT_ID:
                this.emit('assignedObjectID', new recv_1.RecvAssignedObjectID(data));
                break;
            case SimConnectSocket_1.RecvID.ID_RESERVED_KEY:
                this.emit('reservedKey', new recv_1.RecvReservedKey(data));
                break;
            case SimConnectSocket_1.RecvID.ID_CUSTOM_ACTION:
                this.emit('customAction', new recv_1.RecvCustomAction(data));
                break;
            case SimConnectSocket_1.RecvID.ID_SYSTEM_STATE:
                this.emit('systemState', new recv_1.RecvSystemState(data));
                break;
            case SimConnectSocket_1.RecvID.ID_CLIENT_DATA:
                this.emit('clientData', new recv_1.RecvSimObjectData(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_WEATHER_MODE:
                this.emit('eventWeatherMode', new recv_1.RecvEventWeatherMode(data));
                break;
            case SimConnectSocket_1.RecvID.ID_AIRPORT_LIST:
                this.emit('airportList', new recv_1.RecvAirportList(data));
                break;
            case SimConnectSocket_1.RecvID.ID_VOR_LIST:
                this.emit('vorList', new recv_1.RecvVORList(data));
                break;
            case SimConnectSocket_1.RecvID.ID_NDB_LIST:
                this.emit('ndbList', new recv_1.RecvNDBList(data));
                break;
            case SimConnectSocket_1.RecvID.ID_WAYPOINT_LIST:
                this.emit('waypointList', new recv_1.RecvWaypointList(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_MULTIPLAYER_SERVER_STARTED:
                this.emit('eventMultiplayerServerStarted');
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_MULTIPLAYER_CLIENT_STARTED:
                this.emit('eventMultiplayerClientStarted');
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_MULTIPLAYER_SESSION_ENDED:
                this.emit('eventMultiplayerSessionEnded');
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_RACE_END:
                this.emit('eventRaceEnd', new recv_1.RecvEventRaceEnd(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_RACE_LAP:
                this.emit('eventRaceLap', new recv_1.RecvEventRaceLap(data));
                break;
            case SimConnectSocket_1.RecvID.ID_EVENT_EX1:
                this.emit('eventEx1', new RecvEventEx1_1.RecvEventEx1(data));
                break;
            case SimConnectSocket_1.RecvID.ID_FACILITY_DATA:
                this.emit('facilityData', new RecvFacilityData_1.RecvFacilityData(data));
                break;
            case SimConnectSocket_1.RecvID.ID_FACILITY_DATA_END:
                this.emit('facilityDataEnd', new RecvFacilityDataEnd_1.RecvFacilityDataEnd(data));
                break;
            case SimConnectSocket_1.RecvID.ID_FACILITY_MINIMAL_LIST:
                this.emit('facilityMinimalList', new RecvFacilityMinimalList_1.RecvFacilityMinimalList(data));
                break;
        }
    }
    _resetBuffer() {
        this._writeBuffer.clear();
        this._writeBuffer.setOffset(16); // Bytes 0-16 are for the packet header
    }
    _sendPacket(type) {
        const packetSize = this._writeBuffer.getOffset();
        // Replace byte 0-16 with package header
        this._writeBuffer.writeInt(packetSize, 0);
        this._writeBuffer.writeInt(this._ourProtocol, 4);
        this._writeBuffer.writeInt(0xf0000000 | type, 8);
        this._writeBuffer.writeInt(this._packetsSent++, 12);
        const data = this._writeBuffer.getBuffer();
        this._clientSocket.write(data);
    }
    _open() {
        this._openTimeout = setTimeout(() => {
            this.close();
            this.emit('error', Error('Open timeout'));
        }, 5000);
        const version = openPacketData[this._ourProtocol];
        if (!version) {
            throw Error(SimConnectError.InvalidProtocol); // $NON-NLS-1$
        }
        this._resetBuffer();
        this._writeBuffer.writeString256(this._appName);
        this._writeBuffer.writeInt(0);
        this._writeBuffer.writeByte(0x00);
        this._writeBuffer.writeString(version.alias, 3);
        this._writeBuffer.writeInt(version.major);
        this._writeBuffer.writeInt(version.minor);
        this._writeBuffer.writeInt(version.buildMajor);
        this._writeBuffer.writeInt(version.buildMinor);
        this._sendPacket(0x01);
    }
}
exports.SimConnectConnection = SimConnectConnection;
module.exports = { SimConnectConnection };
//# sourceMappingURL=data:application/json;base64,